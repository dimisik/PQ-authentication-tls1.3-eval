#!/usr/bin/env python2

import argparse
import subprocess
import re
import numpy as np

# Split out the command line
parser = argparse.ArgumentParser()
parser.add_argument('--file', action='store', dest='filename', required=False,
                    default='test1.pcap', help='Name of tshark pcap file')
parser.add_argument('--port', action='store', dest='port', required=False,
                    default=4433, help='TCP/TLS socket number')
arg = parser.parse_args()

# Build out the tshark command
tshark_cmd = 'tshark -r {} -d tcp.port=={},ssl -2R "ssl or tcp"'
tshark_cmd = tshark_cmd.format(arg.filename, arg.port,)

# Execute the tshark command
output = \
  subprocess.Popen(tshark_cmd, shell=True, stdout=subprocess.PIPE).stdout.read()

# Look for start/finish of the TLS session
loop_count = 0
start_dict = {}
finish_dict = {}
start_time=0
rtt_start=0
cert_start=0
rtt=0
cert_flag = 0
cert_data = 0
cert_stop = 0
cert_dur = 0
tcp_retran_count=0
deb=0
for line in output.split('\n'):
    line = line.strip(' ')
    # Beginning of the session
    if line.find('[SYN]') != -1:
        loop_count += 1
        tcp_retran_count=0
        line = re.sub(' +', ' ', line)
        line_list = line.split(' ')
        rtt_start=float(line_list[1])
        continue
    if line.find('[SYN, ACK]') != -1:
        line = re.sub(' +', ' ', line)
        line_list = line.split(' ')
        rtt = str(float(line_list[1])-rtt_start)
        continue   
    if line.find('Client Hello') != -1:
        line = re.sub(' +', ' ', line)
        line_list = line.split(' ')
        start_dict[loop_count] = '{},{},'.format(line_list[0], line_list[1],)
        start_time = float(line_list[1])
        continue
    if line.find('Server Hello') != -1:
    	cert_data = 0
    	cert_dur = 0
        cert_flag = 1
        line = re.sub(' +', ' ', line)
        line_list = line.split(' ')
        cert_data = cert_data + float(line_list[6])
        cert_start = float(line_list[1])
        cert_stop = float(line_list[1])
        continue          
    if line.find('Change Cipher Spec') != -1: 
        cert_flag = 0
        cert_dur = cert_stop - cert_start
        continue          
    if line.find('TCP Retransmission') != -1: 
        tcp_retran_count += 1
    # End of the session (look for the last Application data)
    if line.find('Application Data') != -1:
        if cert_flag == 1:
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            cert_data = cert_data + float(line_list[6])
            cert_stop = float(line_list[1])
        else:
            line = re.sub(' +', ' ', line)
            line_list = line.split(' ')
            finish_dict[loop_count] = '{},{},{},{},{},{},{}'.format(line_list[0], line_list[1], \
                   str(float(line_list[1])- start_time), rtt, str(cert_dur), str(cert_data), str(tcp_retran_count))

# Print the results in CSV format
for loop in range(1, loop_count+1):
    print_str = str(loop) + ',' + str(start_dict[loop]) + str(finish_dict[loop]) 
    print print_str 
    
exit(0)
